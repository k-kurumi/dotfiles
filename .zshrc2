export EDITOR=vim
export VISUAL=vim # macのcrontab用

# pecoでコマンド履歴検索
function peco_select_history() {
  local tac
  if which tac > /dev/null; then
    tac="tac"
  else
    tac="tail -r"
  fi

  BUFFER=$(\history -n 1 | \
    eval $tac | \
    peco --query "$LBUFFER")
  CURSOR=$#BUFFER
  zle clear-screen
}
zle -N peco_select_history
bindkey '^R' peco_select_history

# ghqのリポジトリに移動する
function peco_select_ghq_repo() {
  local selected_dir=$(ghq list -p | peco --query "$LBUFFER")
  if [ -n "$selected_dir" ]; then
    BUFFER="cd ${selected_dir}"
    zle accept-line
  fi
  zle clear-screen
}
zle -N peco_select_ghq_repo
bindkey '^G' peco_select_ghq_repo

# ruby
export PATH="$HOME/.rbenv/bin:$PATH"
export PATH="$HOME/.rbenv/shims:$PATH"  # /usr/local/bin/rubyが先に読まれるため上書きする

# python
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"

# node
export PATH="$HOME/.ndenv/bin:$PATH"
eval "$(ndenv init -)"

# golang(1.8のデフォルトとは違う)
export GOPATH=${HOME}/dev
export GOROOT=${HOME}/go
export PATH=${GOPATH}/bin:${PATH}
export PATH=${GOROOT}/bin:${PATH}

# rust
export RUST_SRC_PATH=${HOME}/.multirust/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src

# # nim
# mkdir -p ~/.nim/bin # macはbrewで入れるためダミーとして作っておく
# export NIM_HOME=~/.nim
# export PATH=${NIM_HOME}/bin:$PATH

# direnv
eval "$(direnv hook zsh)"

# ^を展開しないようにするためgitでHEAD^などがエスケープなしで使えるようになる
unsetopt extended_glob

# history
HISTFILE=~/.zhistory
HISTSIZE=100000
SAVEHIST=100000
setopt hist_ignore_dups     # ignore duplication command history list
setopt share_history        # share command history data

# https://github.com/sindresorhus/pure
export PURE_PROMPT_SYMBOL=$

# cf a のソート
cfa() {
  LANG=en_US.UTF-8 CF_TRACE=false CF_COLOR=false cf a | awk 'BEGIN{idx=0;} (NR <= 4){print} (NR > 4){buf[idx++]=$0} END{asort(buf);for(i=1;i<=idx;i++){print buf[i]}}'
}

# cf s のソート
cfs() {
  LANG=en_US.UTF-8 CF_TRACE=false CF_COLOR=false cf s | awk 'BEGIN{idx=0;} (NR <= 4){print} (NR > 4){buf[idx++]=$0} END{asort(buf);for(i=1;i<=idx;i++){print buf[i]}}'
}

# json to yaml
j2y() {
  ruby -ryaml -rjson -e 'puts YAML.dump(JSON.load(ARGF.read))'
}

# yaml to json
y2j() {
  ruby -ryaml -rjson -e 'puts JSON.pretty_generate(YAML.load(ARGF.read))'
}

# tigよりわかりやすいgitツリー
function gitt() { git-foresta --style=10 "$@" | less -RSX }
function gitta() { git-foresta --all --style=10 "$@" | less -RSX }
compdef _git gitt=git-log
compdef _git gitta=git-log

# mkdir-p風にフォルダを作ってからtouchする
function touch_p() {
  local dir=$(dirname $1)
  mkdir -p ${dir}
  touch $1
}

# $ echo abc_def | camel
# AbcDef
function camel() {
  perl -pe 's#(_|^)(.)#\u$2#g'
}

# $ echo AbcDef | snake
# abc_def
function snake() {
  perl -pe 's#([A-Z])#_\L$1#g' | perl -pe 's#^_##'
}

# clipper経由でクリップボードにコピー
# usage:) ls -l | clip
alias clip='nc localhost 8377'

# 鍵のエージェント
alias ssh_agent_start='eval `ssh-agent` && ssh-add ~/.ssh/id_rsa'

source ~/.rdb.sh
source ~/.tool.sh
