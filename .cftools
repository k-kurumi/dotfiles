# cftools

cfpp_organizations() {
  url=${1:-"/v2/organizations"}

  json=`${CF:-cf} curl ${url}`

  echo $json | jq -c '.resources[]|
  {
    guid: .metadata.guid,
    name: .entity.name
  }'

  url=`echo $json | jq -c -r 'if .next_url == null then empty else .next_url end'`
  [ ! -z $url ] && cfpp_organizations $url
  return 0
}

cfpp_spaces() {
  url=${1:-"/v2/spaces"}

  json=`${CF:-cf} curl ${url}`

  echo $json | jq -c '.resources[]|
  {
    guid: .metadata.guid,
    name: .entity.name
  }'

  url=`echo $json | jq -c -r 'if .next_url == null then empty else .next_url end'`
  [ ! -z $url ] && cfpp_spaces $url
  return 0
}

cfpp_apps() {
  url=${1:-"/v2/apps"}

  json=`${CF:-cf} curl ${url}`

  echo $json | jq -c '.resources[]|
  {
    guid:          .metadata.guid,
    name:          .entity.name,
    state:         .entity.state
  }'

  url=`echo $json | jq -c -r 'if .next_url == null then empty else .next_url end'`
  [ ! -z $url ] && cfpp_apps $url
  return 0
}

cfpp_apps_more() {
  url=${1:-"/v2/apps"}

  json=`${CF:-cf} curl ${url}`

  echo $json | jq -c '.resources[]|
  {
    guid:          .metadata.guid,
    name:          .entity.name,
    buildpack:     .entity.detected_buildpack,
    auto_update:   .entity.auto_update,
    state:         .entity.state,
    updated_at:    .metadata.updated_at,
    package_state: .entity.package_state,
    instances:     .entity.instances,
    mem:           .entity.memory
  }'

  url=`echo $json | jq -c -r 'if .next_url == null then empty else .next_url end'`
  [ ! -z $url ] && cfpp_apps_more $url
  return 0
}

cfpp_service_instances() {
  url=${1:-"/v2/service_instances?inline-relations-depth=2"}

  json=`${CF:-cf} curl ${url}`

  echo $json | jq -c '.resources[]|
  {
    guid: .metadata.guid,
    name: .entity.name,
    service_guid: .entity.service_plan.entity.service.metadata.guid,
    service_label: .entity.service_plan.entity.service.entity.label
  }'

  url=`echo $json | jq -c -r 'if .next_url == null then empty else .next_url end'`
  [ ! -z $url ] && cfpp_service_instances $url
  return 0
}

cfpp_user_provided_service_instances() {
  url=${1:-"/v2/user_provided_service_instances"}

  json=`${CF:-cf} curl ${url}`

  echo $json | jq -c '.resources[]|
  {
    guid: .metadata.guid,
    name: .entity.name,
    credentials: .entity.credentials
  }'

  url=`echo $json | jq -c -r 'if .next_url == null then empty else .next_url end'`
  [ ! -z $url ] && cfpp_user_provided_service_instances $url
  return 0
}

cfpp_services() {
  url=${1:-"/v2/services?inline-relations-depth=1"}

  json=`${CF:-cf} curl ${url}`

  echo $json | jq -c '.resources[]|
  {
    guid: .metadata.guid,
    label: .entity.label,
    service_plans: [
      .entity.service_plans[]|
      {
        name: .entity.name,
        guid: .metadata.guid
      }
    ]
  }'

  url=`echo $json | jq -c -r 'if .next_url == null then empty else .next_url end'`
  [ ! -z $url ] && cfpp_services $url
  return 0
}

cfpp_service_bindings() {
  url=${1:-"/v2/service_bindings?inline-relations-depth=2"}

  json=`${CF:-cf} curl ${url}`

  echo $json | jq -c '.resources[]|
  {
    guid: .metadata.guid,
    app_guid: .entity.app_guid,
    app_name: .entity.app.entity.name,
    service_instance_guid: .entity.service_instance.metadata.guid,
    service_instance_name: .entity.service_instance.entity.name
  }'

  url=`echo $json | jq -c -r 'if .next_url == null then empty else .next_url end'`
  [ ! -z $url ] && cfpp_service_bindings $url
  return 0
}

cfpp_routes() {
  url=${1:-"/v2/routes?inline-relations-depth=1"}

  json=`${CF:-cf} curl ${url}`

  echo $json | jq -c '.resources[]|
  {
    guid: .metadata.guid,
    host: .entity.host,
    domain_guid: .entity.domain.metadata.guid,
    domain_name: .entity.domain.entity.name
  }'

  url=`echo $json | jq -c -r 'if .next_url == null then empty else .next_url end'`
  [ ! -z $url ] && cfpp_routes $url
  return 0
}

cfpp_domains() {
  url=${1:-"/v2/domains"}

  json=`${CF:-cf} curl ${url}`

  echo $json | jq -c '.resources[]|
  {
    guid: .metadata.guid,
    name: .entity.name
  }'

  url=`echo $json | jq -c -r 'if .next_url == null then empty else .next_url end'`
  [ ! -z $url ] && cfpp_domains $url
  return 0
}

cfpp_stats_guid() {
  guid=$1
  [ -z $guid ] && return 1

  url="/v2/apps/${guid}/stats"
  ${CF:-cf} curl ${url} | jq .
  return 0
}

# 全てのアプリを削除する
cfrm_apps_all() {
  ${CF:-cf} a | sed -ne '/name/,$p' | tail -n +2 | awk '{print $1}'

  echo -n "are you sure? [y/n]: "
  read answer
  [ $answer = "y" ] && echo ">>> DELETE!!" || return 1

  ${CF:-cf} a | sed -ne '/name/,$p' | tail -n +2 | awk '{print $1}' | while read app
  do
    ${CF:-cf} delete -f -r $app
  done
}

# 引数指定したアプリを削除する
cfrm_apps() {
  app_name=${1}

  if [ -z $app_name ]
  then
    echo ">>> ERROR: need app name keyword"
    ${CF:-cf} a
    return 1
  fi

  ${CF:-cf} a | sed -ne '/name/,$p' | tail -n +2 | awk '{print $1}' | egrep $app_name

  echo -n "are you sure? [y/n]: "
  read answer
  [ $answer = "y" ] && echo ">>> DELETE!!" || return 1

  ${CF:-cf} a | sed -ne '/name/,$p' | tail -n +2 | awk '{print $1}' | egrep $app_name | while read app
  do
    ${CF:-cf} delete -f -r $app
  done
}


# vim: ft=sh
